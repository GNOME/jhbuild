From dbc06d6ce90a7eb3ee21b24a028291798724bd80 Mon Sep 17 00:00:00 2001
From: Ting-Wei Lan <lantw@src.gnome.org>
Date: Thu, 4 Oct 2018 23:03:30 +0800
Subject: [PATCH] backends: Use raw_link_args to check for the need of RPATH

Function rpaths_for_bundled_shared_libraries assumes it needs RPATH when
linking arguments of an external dependency has exactly one argument and
the only argument is an absolute path to a library file. This was mostly
fine because almost all .pc files use a -L -l pair instead of the full
path of the library, which means pkg-config dependencies almost always
have at least two arguments. However, there are patches landed in the
meson 0.47 cycle which convert -L -l pair returned by pkg-config to the
absolute path of library. If the output of pkg-config includes exactly
one -L argument and one -l argument, it will be converted to exactly one
absolute path by meson and rpaths_for_bundled_shared_libraries will
assume it needs RPATH. Since meson passes both -rpath and -rpath-link to
the linker and -rpath-link has precedence over LD_LIBRARY_PATH, it
changes the search order of dependent libraries in an unexpected way and
it causes a lot of linking troubles in JHBuild environments on FreeBSD.

To make the method behave like the old way of using -L -l pairs and
avoid library path order problems, we use raw_link_args instead of
link_args here. raw_link_args stores the unmodified output of pkg-config
and it is much less likely to accidentally match the rule currently used
by the method.

Works around https://github.com/mesonbuild/meson/issues/4270.
---
 mesonbuild/backend/backends.py                 |  2 +-
 run_unittests.py                               | 18 +++++++++++-------
 test cases/unit/80 global-rpath/meson.build    |  4 +++-
 .../unit/80 global-rpath/meson_options.txt     |  1 +
 .../unit/80 global-rpath/yonder/meson.build    |  2 --
 5 files changed, 16 insertions(+), 11 deletions(-)
 create mode 100644 test cases/unit/80 global-rpath/meson_options.txt

diff --git a/mesonbuild/backend/backends.py b/mesonbuild/backend/backends.py
index 4c61abf6a..eb76c06a8 100644
--- a/mesonbuild/backend/backends.py
+++ b/mesonbuild/backend/backends.py
@@ -612,7 +612,7 @@ class Backend:
         for dep in target.external_deps:
             if not isinstance(dep, (dependencies.ExternalLibrary, dependencies.PkgConfigDependency)):
                 continue
-            la = dep.link_args
+            la = dep.get_link_args(raw=True)
             if len(la) != 1 or not os.path.isabs(la[0]):
                 continue
             # The only link argument is an absolute path to a library file.
diff --git a/run_unittests.py b/run_unittests.py
index b2b7367b0..48487a70e 100755
--- a/run_unittests.py
+++ b/run_unittests.py
@@ -6809,13 +6809,15 @@ class LinuxlikeTests(BasePlatformTests):
         self.init(testdir)
         self.build()
 
+        libdir = self.builddir
         os.environ['PKG_CONFIG_LIBDIR'] = os.path.join(self.builddir, 'meson-uninstalled')
         if is_cygwin():
-            os.environ['PATH'] += os.pathsep + self.builddir
+            os.environ['PATH'] += os.pathsep + libdir
 
         self.new_builddir()
+        meson_args = [f'-Dc_link_args=-Wl,-rpath,{libdir}']
         testdir = os.path.join(self.common_test_dir, '44 pkgconfig-gen', 'dependencies')
-        self.init(testdir)
+        self.init(testdir, extra_args=meson_args)
         self.build()
         self.run_tests()
 
@@ -7475,9 +7477,9 @@ class LinuxlikeTests(BasePlatformTests):
         oldinstalldir = self.installdir
 
         # Build and install an external library without DESTDIR.
-        # The external library generates a .pc file without an rpath.
         yonder_dir = os.path.join(testdir, 'yonder')
         yonder_prefix = os.path.join(oldinstalldir, 'yonder')
+        yonder_includedir = os.path.join(yonder_prefix, 'include')
         yonder_libdir = os.path.join(yonder_prefix, self.libdir)
         self.prefix = yonder_prefix
         self.installdir = yonder_prefix
@@ -7501,13 +7503,15 @@ class LinuxlikeTests(BasePlatformTests):
             # (as systems like buildroot and guix are wont to do)
             # and verify install preserves that rpath.
             self.new_builddir()
-            env = {'LDFLAGS': rpath_format + yonder_libdir,
+            meson_args = [f'-Dyonder_libdir={yonder_libdir}']
+            env = {'CPPFLAGS': '-I' + yonder_includedir,
+                   'LDFLAGS': rpath_format + yonder_libdir,
                    'PKG_CONFIG_PATH': os.path.join(yonder_libdir, 'pkgconfig')}
             if exception:
                 with self.assertRaises(subprocess.CalledProcessError):
-                    self.init(testdir, override_envvars=env)
+                    self.init(testdir, extra_args=meson_args, override_envvars=env)
                 continue
-            self.init(testdir, override_envvars=env)
+            self.init(testdir, extra_args=meson_args, override_envvars=env)
             self.build()
             self.install(use_destdir=False)
             got_rpath = get_rpath(os.path.join(yonder_prefix, 'bin/rpathified'))
@@ -8029,7 +8033,7 @@ class LinuxlikeTests(BasePlatformTests):
         # Test that installed libraries works
         self.new_builddir()
         self.prefix = oldprefix
-        meson_args = [f'-Dc_link_args=-L{libdir}',
+        meson_args = [f'-Dc_link_args=-L{libdir} -Wl,-rpath,{libdir}',
                       '--fatal-meson-warnings']
         testdir = os.path.join(self.unit_test_dir, '67 static link')
         env = {'PKG_CONFIG_LIBDIR': os.path.join(libdir, 'pkgconfig')}
diff --git a/test cases/unit/80 global-rpath/meson.build b/test cases/unit/80 global-rpath/meson.build
index c67d9e08b..267e7edd8 100644
--- a/test cases/unit/80 global-rpath/meson.build	
+++ b/test cases/unit/80 global-rpath/meson.build	
@@ -1,3 +1,5 @@
 project('global-rpath', 'cpp')
-yonder_dep = dependency('yonder')
+cpp = meson.get_compiler('cpp')
+yonder_libdir = get_option('yonder_libdir')
+yonder_dep = cpp.find_library('yonder', dirs: [yonder_libdir])
 executable('rpathified', 'rpathified.cpp', dependencies: [yonder_dep], install: true)
diff --git a/test cases/unit/80 global-rpath/meson_options.txt b/test cases/unit/80 global-rpath/meson_options.txt
new file mode 100644
index 000000000..19bf25569
--- /dev/null
+++ b/test cases/unit/80 global-rpath/meson_options.txt	
@@ -0,0 +1 @@
+option('yonder_libdir', type: 'string')
diff --git a/test cases/unit/80 global-rpath/yonder/meson.build b/test cases/unit/80 global-rpath/yonder/meson.build
index e32f38330..a3ee7f595 100644
--- a/test cases/unit/80 global-rpath/yonder/meson.build	
+++ b/test cases/unit/80 global-rpath/yonder/meson.build	
@@ -1,5 +1,3 @@
 project('yonder', 'cpp')
 yonder = shared_library('yonder', 'yonder.cpp', install: true)
 install_headers('yonder.h')
-pkgconfig = import('pkgconfig')
-pkgconfig.generate(yonder)
-- 
2.31.1

