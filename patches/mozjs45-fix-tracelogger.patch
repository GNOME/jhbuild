# === Fix the SM45 tracelogger ===
# This patch is a squashed version of several patches that were adapted
# to fix failing hunks.
#
# Applied in the following order, they are:
# * https://bugzilla.mozilla.org/show_bug.cgi?id=1266649
#    Handle failing to add to pointermap gracefully.
# * https://bugzilla.mozilla.org/show_bug.cgi?id=1280648
#    Don't cache based on pointers to movable GC things.
# * https://bugzilla.mozilla.org/show_bug.cgi?id=1255766
#    Also mark resizing of memory.
# * https://bugzilla.mozilla.org/show_bug.cgi?id=1259403
#    Only increase capacity by multiples of 2.
#    Always make sure there are 3 free slots for events.
# ===

diff --git a/js/src/jit-test/tests/tracelogger/bug1266649.js b/js/src/jit-test/tests/tracelogger/bug1266649.js
new file mode 100644
--- /dev/null
+++ b/js/src/jit-test/tests/tracelogger/bug1266649.js
@@ -0,0 +1,8 @@
+
+var du = new Debugger();
+if (typeof du.setupTraceLogger === "function") {
+    du.setupTraceLogger({
+        Scripts: true
+    })
+    oomTest(() => function(){});
+}
--- a/js/src/vm/TraceLogging.cpp	2016-04-14 10:55:17.000000000 -0700
+++ b/js/src/vm/TraceLogging.cpp	2017-03-29 18:17:25.235673763 -0700
@@ -393,14 +393,14 @@
         return nullptr;
     }
 
-    if (!pointerMap.add(p, text, payload))
-        return nullptr;
-
     if (graph.get())
         graph->addTextId(textId, str);
 
     nextTextId++;
 
+    if (!pointerMap.add(p, text, payload))
+        return nullptr;
+
     return payload;
 }
 
@@ -420,10 +420,13 @@
     if (!traceLoggerState->isTextIdEnabled(type))
         return getOrCreateEventPayload(type);
 
-    PointerHashMap::AddPtr p = pointerMap.lookupForAdd(ptr);
-    if (p) {
-        MOZ_ASSERT(p->value()->textId() < nextTextId); // Sanity check.
-        return p->value();
+    PointerHashMap::AddPtr p;
+    if (ptr) {
+        p = pointerMap.lookupForAdd(ptr);
+        if (p) {
+            MOZ_ASSERT(p->value()->textId() < nextTextId); // Sanity check.
+            return p->value();
+        }
     }
 
     // Compute the length of the string to create.
@@ -455,14 +458,16 @@
         return nullptr;
     }
 
-    if (!pointerMap.add(p, ptr, payload))
-        return nullptr;
-
     if (graph.get())
         graph->addTextId(textId, str);
 
     nextTextId++;
 
+    if (ptr) {
+        if (!pointerMap.add(p, ptr, payload))
+            return nullptr;
+    }
+
     return payload;
 }
 
@@ -477,7 +482,7 @@
 TraceLoggerThread::getOrCreateEventPayload(TraceLoggerTextId type,
                                            const JS::ReadOnlyCompileOptions& script)
 {
-    return getOrCreateEventPayload(type, script.filename(), script.lineno, script.column, &script);
+    return getOrCreateEventPayload(type, script.filename(), script.lineno, script.column, nullptr);
 }
 
 void
@@ -550,19 +555,42 @@
         return;
 
     MOZ_ASSERT(traceLoggerState);
-    if (!events.ensureSpaceBeforeAdd()) {
+    if (!events.hasSpaceForAdd(3)) {
         uint64_t start = rdtsc() - traceLoggerState->startupTime;
 
-        if (graph.get())
-            graph->log(events);
+        if (!events.ensureSpaceBeforeAdd(3)) {
+            if (graph.get())
+                graph->log(events);
+
+            iteration_++;
+            events.clear();
+
+            // Remove the item in the pointerMap for which the payloads
+            // have no uses anymore
+            for (PointerHashMap::Enum e(pointerMap); !e.empty(); e.popFront()) {
+                if (e.front().value()->uses() != 0)
+                    continue;
+
+                TextIdHashMap::Ptr p = textIdPayloads.lookup(e.front().value()->textId());
+                MOZ_ASSERT(p);
+                textIdPayloads.remove(p);
 
-        iteration_++;
-        events.clear();
+                e.removeFront();
+            }
+
+            // Free all payloads that have no uses anymore.
+            for (TextIdHashMap::Enum e(textIdPayloads); !e.empty(); e.popFront()) {
+                if (e.front().value()->uses() == 0) {
+                    js_delete(e.front().value());
+                    e.removeFront();
+                }
+            }
+        }
 
         // Log the time it took to flush the events as being from the
         // Tracelogger.
         if (graph.get()) {
-            MOZ_ASSERT(events.capacity() > 2);
+            MOZ_ASSERT(events.capacity() - events.size() > 2);
             EventEntry& entryStart = events.pushUninitialized();
             entryStart.time = start;
             entryStart.textId = TraceLogger_Internal;
@@ -572,26 +600,6 @@
             entryStop.textId = TraceLogger_Stop;
         }
 
-        // Remove the item in the pointerMap for which the payloads
-        // have no uses anymore
-        for (PointerHashMap::Enum e(pointerMap); !e.empty(); e.popFront()) {
-            if (e.front().value()->uses() != 0)
-                continue;
-
-            TextIdHashMap::Ptr p = textIdPayloads.lookup(e.front().value()->textId());
-            MOZ_ASSERT(p);
-            textIdPayloads.remove(p);
-
-            e.removeFront();
-        }
-
-        // Free all payloads that have no uses anymore.
-        for (TextIdHashMap::Enum e(textIdPayloads); !e.empty(); e.popFront()) {
-            if (e.front().value()->uses() == 0) {
-                js_delete(e.front().value());
-                e.removeFront();
-            }
-        }
     }
 
     uint64_t time = rdtsc() - traceLoggerState->startupTime;
diff --git a/js/src/vm/TraceLogging.h b/js/src/vm/TraceLogging.h
--- a/js/src/vm/TraceLogging.h
+++ b/js/src/vm/TraceLogging.h
@@ -237,17 +237,17 @@ class TraceLoggerThread
         // If still logging in the same iteration, there are no lost events.
         if (lastIteration == iteration_) {
             MOZ_ASSERT(lastSize <= events.size());
             return false;
         }
 
         // If we are in a consecutive iteration we are only sure we didn't lose any events,
         // when the lastSize equals the maximum size 'events' can get.
-        if (lastIteration == iteration_ - 1 && lastSize == CONTINUOUSSPACE_LIMIT)
+        if (lastIteration == iteration_ - 1 && lastSize == events.max_items())
             return false;
 
         return true;
     }
 
     const char* eventText(uint32_t id);
     bool textIdIsScriptEvent(uint32_t id);
 
diff --git a/js/src/vm/TraceLoggingTypes.h b/js/src/vm/TraceLoggingTypes.h
--- a/js/src/vm/TraceLoggingTypes.h
+++ b/js/src/vm/TraceLoggingTypes.h
@@ -127,25 +127,25 @@ inline bool
 TLTextIdIsTreeEvent(uint32_t id)
 {
     // Everything between TraceLogger_Error and TraceLogger_LastTreeItem are tree events and
     // atm also every custom event.
     return (id > TraceLogger_Error && id < TraceLogger_LastTreeItem) ||
            id >= TraceLogger_Last;
 }
 
-// The maximum amount of ram memory a continuous space structure can take (in bytes).
-static const uint32_t CONTINUOUSSPACE_LIMIT = 200 * 1024 * 1024;
-
 template <class T>
 class ContinuousSpace {
     T* data_;
     uint32_t size_;
     uint32_t capacity_;
 
+    // The maximum amount of ram memory a continuous space structure can take (in bytes).
+    static const uint32_t LIMIT = 200 * 1024 * 1024;
+
   public:
     ContinuousSpace ()
      : data_(nullptr)
     { }
 
     bool init() {
         capacity_ = 64;
         size_ = 0;
@@ -157,16 +157,20 @@ class ContinuousSpace {
     }
 
     ~ContinuousSpace()
     {
         js_free(data_);
         data_ = nullptr;
     }
 
+    uint32_t max_items() {
+        return LIMIT / sizeof(T);
+    }
+
     T* data() {
         return data_;
     }
 
     uint32_t capacity() {
         return capacity_;
     }
 
@@ -194,21 +198,24 @@ class ContinuousSpace {
     }
 
     bool ensureSpaceBeforeAdd(uint32_t count = 1) {
         MOZ_ASSERT(data_);
         if (hasSpaceForAdd(count))
             return true;
 
         uint32_t nCapacity = capacity_ * 2;
-        if (size_ + count > nCapacity || nCapacity * sizeof(T) > CONTINUOUSSPACE_LIMIT) {
+        if (size_ + count > nCapacity)
             nCapacity = size_ + count;
 
+        if (nCapacity > max_items()) {
+            nCapacity = max_items();
+
             // Limit the size of a continuous buffer.
-            if (nCapacity * sizeof(T) > CONTINUOUSSPACE_LIMIT)
+            if (size_ + count > nCapacity)
                 return false;
         }
 
         T* entries = (T*) js_realloc(data_, nCapacity * sizeof(T));
         if (!entries)
             return false;
 
         data_ = entries;
